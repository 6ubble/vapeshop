// src/features/SimpleCheckout.tsx
import React, { useState } from 'react';
import { MapPin, Phone, User, Banknote } from 'lucide-react';
import { Button, Input, Card } from '../shared/Ui';
import { useCart } from '../entities/cart';
import { useTelegram } from '../shared/Telegram';
import { formatPrice } from '../shared/utils';

interface CheckoutFormProps {
  onSuccess?: () => void;
}

export const CheckoutForm: React.FC<CheckoutFormProps> = ({ onSuccess }) => {
  const { items, total, clear } = useCart();
  const { user, haptic, showAlert } = useTelegram();
  
  const [formData, setFormData] = useState({
    name: user?.first_name || '',
    phone: '',
    deliveryType: 'pickup' as 'pickup' | 'delivery',
    address: '',
    comment: ''
  });

  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
  const validate = () => {
    const newErrors: Record<string, string> = {};
    
    if (!formData.name.trim()) newErrors.name = '–í–≤–µ–¥–∏—Ç–µ –∏–º—è';
    if (!formData.phone.trim()) newErrors.phone = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω';
    if (formData.deliveryType === 'delivery' && !formData.address.trim()) {
      newErrors.address = '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async () => {
    if (!validate() || items.length === 0) {
      haptic.error();
      return;
    }

    setIsSubmitting(true);
    haptic.medium();

    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
      const orderData = {
        type: 'new_order',
        timestamp: new Date().toISOString(),
        customer: {
          name: formData.name,
          phone: formData.phone,
          telegramId: user?.id,
          username: user?.username
        },
        items: items.map(item => ({
          name: item.product.name,
          price: item.product.price,
          quantity: item.quantity,
          total: item.product.price * item.quantity
        })),
        delivery: {
          type: formData.deliveryType,
          address: formData.deliveryType === 'delivery' ? formData.address : '–°–∞–º–æ–≤—ã–≤–æ–∑',
          comment: formData.comment
        },
        totals: {
          items: total,
          delivery: formData.deliveryType === 'delivery' ? 300 : 0,
          final: total + (formData.deliveryType === 'delivery' ? 300 : 0)
        },
        paymentMethod: 'cash'
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –±–æ—Ç
      const tg = window.Telegram?.WebApp;
      if (tg?.sendData) {
        tg.sendData(JSON.stringify(orderData));
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
      await showAlert(
        `‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n` +
        `–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n` +
        `üìû ${formData.phone}\n` +
        `üí∞ –û–ø–ª–∞—Ç–∞: ${formatPrice(orderData.totals.final)} –Ω–∞–ª–∏—á–Ω—ã–º–∏`
      );

      // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ —Ñ–æ—Ä–º—É
      clear();
      onSuccess?.();
      
    } catch (error) {
      await showAlert('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      haptic.error();
    } finally {
      setIsSubmitting(false);
    }
  };

  const deliveryFee = formData.deliveryType === 'delivery' ? 300 : 0;
  const finalTotal = total + deliveryFee;

  return (
    <div className="space-y-4">
      {/* –ö–æ–Ω—Ç–∞–∫—Ç—ã */}
      <Card>
        <h3 className="font-semibold mb-3 flex items-center gap-2">
          <User size={18} />
          –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        </h3>
        
        <div className="space-y-3">
          <Input
            value={formData.name}
            onChange={(value) => setFormData(prev => ({ ...prev, name: value }))}
            placeholder="–í–∞—à–µ –∏–º—è"
            error={errors.name}
            icon={<User size={16} />}
          />
          
          <Input
            value={formData.phone}
            onChange={(value) => setFormData(prev => ({ ...prev, phone: value }))}
            placeholder="+7 (999) 123-45-67"
            error={errors.phone}
            icon={<Phone size={16} />}
            type="tel"
          />
        </div>
      </Card>

      {/* –ü–æ–ª—É—á–µ–Ω–∏–µ */}
      <Card>
        <h3 className="font-semibold mb-3 flex items-center gap-2">
          <MapPin size={18} />
          –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑?
        </h3>
        
        <div className="space-y-3">
          <label className="flex items-center gap-3 p-3 border-2 rounded-lg cursor-pointer hover:bg-gray-50 transition-colors">
            <input
              type="radio"
              name="delivery"
              checked={formData.deliveryType === 'pickup'}
              onChange={() => setFormData(prev => ({ ...prev, deliveryType: 'pickup' }))}
            />
            <div className="flex-1">
              <div className="font-medium">üè™ –°–∞–º–æ–≤—ã–≤–æ–∑ ‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ</div>
              <div className="text-sm text-tg-hint">—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123 ‚Ä¢ –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ 30 –º–∏–Ω</div>
            </div>
          </label>
          
          <label className="flex items-center gap-3 p-3 border-2 rounded-lg cursor-pointer hover:bg-gray-50 transition-colors">
            <input
              type="radio"
              name="delivery"
              checked={formData.deliveryType === 'delivery'}
              onChange={() => setFormData(prev => ({ ...prev, deliveryType: 'delivery' }))}
            />
            <div className="flex-1">
              <div className="font-medium">üöó –î–æ—Å—Ç–∞–≤–∫–∞ ‚Ä¢ {formatPrice(300)}</div>
              <div className="text-sm text-tg-hint">–ø–æ –≥–æ—Ä–æ–¥—É ‚Ä¢ 1-2 —á–∞—Å–∞</div>
            </div>
          </label>
        </div>
        
        {formData.deliveryType === 'delivery' && (
          <div className="mt-3">
            <Input
              value={formData.address}
              onChange={(value) => setFormData(prev => ({ ...prev, address: value }))}
              placeholder="–£–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞"
              error={errors.address}
              icon={<MapPin size={16} />}
            />
          </div>
        )}
      </Card>

      {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π */}
      <Card>
        <h3 className="font-semibold mb-3">üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</h3>
        <textarea
          value={formData.comment}
          onChange={(e) => setFormData(prev => ({ ...prev, comment: e.target.value }))}
          placeholder="–≠—Ç–∞–∂, –¥–æ–º–æ—Ñ–æ–Ω, –ø–æ–∂–µ–ª–∞–Ω–∏—è..."
          rows={3}
          className="w-full px-3 py-2 bg-tg-secondary-bg rounded-lg resize-none"
        />
      </Card>

      {/* –û–ø–ª–∞—Ç–∞ */}
      <Card className="bg-green-50 border-green-200">
        <div className="flex items-center gap-3">
          <Banknote size={24} className="text-green-600" />
          <div>
            <div className="font-semibold text-green-800">–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏</div>
            <div className="text-sm text-green-600">–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ‚Ä¢ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π</div>
          </div>
        </div>
      </Card>

      {/* –ò—Ç–æ–≥–æ */}
      <Card>
        <div className="space-y-2">
          <div className="flex justify-between">
            <span>–¢–æ–≤–∞—Ä—ã:</span>
            <span>{formatPrice(total)}</span>
          </div>
          
          {deliveryFee > 0 && (
            <div className="flex justify-between">
              <span>–î–æ—Å—Ç–∞–≤–∫–∞:</span>
              <span>{formatPrice(deliveryFee)}</span>
            </div>
          )}
          
          <hr className="my-2" />
          
          <div className="flex justify-between text-lg font-bold">
            <span>–ö –æ–ø–ª–∞—Ç–µ –Ω–∞–ª–∏—á–Ω—ã–º–∏:</span>
            <span className="text-tg-button">{formatPrice(finalTotal)}</span>
          </div>
        </div>
      </Card>

      {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫–∞–∑–∞ */}
      <Button
        onClick={handleSubmit}
        disabled={isSubmitting || items.length === 0}
        loading={isSubmitting}
        fullWidth
        size="lg"
      >
        {isSubmitting ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...' : `–ó–∞–∫–∞–∑–∞—Ç—å –∑–∞ ${formatPrice(finalTotal)}`}
      </Button>

      <div className="text-center text-xs text-tg-hint">
        –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
      </div>
    </div>
  );
};