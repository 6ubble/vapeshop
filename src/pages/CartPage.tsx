import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Minus, Plus, Trash2, ShoppingBag, ArrowRight } from 'lucide-react';
import { Button, Card, EmptyState, BottomSheet } from '../shared/Ui';
import { CheckoutForm } from '../features/Checkout';
import { useCart } from '../entities/cart';
import { useTelegram } from '../shared/Telegram';
import { formatPrice } from '../shared/api';

export const CartPage: React.FC = () => {
  const navigate = useNavigate();
  const { showMainButton, hideMainButton, haptic } = useTelegram();
  const [showCheckout, setShowCheckout] = useState(false);
  
  const { 
    items, 
    total,
    count,
    updateQuantity, 
    remove,
    clear 
  } = useCart();

  // –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ Telegram –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
  useEffect(() => {
    if (items.length > 0) {
      showMainButton(
        `–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ä¢ ${formatPrice(total)}`,
        () => {
          haptic.medium();
          setShowCheckout(true);
        }
      );
    } else {
      hideMainButton();
    }

    return () => hideMainButton();
  }, [items.length, total, showMainButton, hideMainButton, haptic]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const handleQuantityChange = (productId: string, newQuantity: number) => {
    haptic.light();
    updateQuantity(productId, newQuantity);
  };

  const handleRemoveItem = (productId: string, productName: string) => {
    haptic.medium();
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    const tg = window.Telegram?.WebApp;
    if (tg?.showConfirm) {
      tg.showConfirm(
        `–£–¥–∞–ª–∏—Ç—å "${productName}" –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã?`,
        (confirmed: boolean) => {
          if (confirmed) {
            remove(productId);
          }
        }
      );
    } else {
      remove(productId);
    }
  };

  const handleClearCart = () => {
    haptic.medium();
    
    const tg = window.Telegram?.WebApp;
    if (tg?.showConfirm) {
      tg.showConfirm(
        '–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É?',
        (confirmed: boolean) => {
          if (confirmed) {
            clear();
          }
        }
      );
    } else {
      clear();
    }
  };

  // –ü—É—Å—Ç–∞—è –∫–æ—Ä–∑–∏–Ω–∞
  if (items.length === 0) {
    return (
      <EmptyState
        title="–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
        description="–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"
        icon={<ShoppingBag size={48} className="text-tg-hint" />}
        action={{
          label: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥',
          onClick: () => {
            haptic.light();
            navigate('/catalog');
          }
        }}
      />
    );
  }

  return (
    <div className="space-y-4">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold">
          –ö–æ—Ä–∑–∏–Ω–∞ ({count})
        </h1>
        
        <Button
          variant="ghost"
          size="sm"
          onClick={handleClearCart}
          className="text-red-500 hover:bg-red-50"
        >
          <Trash2 size={16} className="mr-1" />
          –û—á–∏—Å—Ç–∏—Ç—å
        </Button>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
      <div className="space-y-3">
        {items.map((item) => (
          <Card key={item.product.id} className="overflow-hidden">
            <div className="flex gap-4">
              {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
              <div 
                className="w-20 h-20 bg-gray-50 rounded-lg overflow-hidden flex-shrink-0 cursor-pointer"
                onClick={() => {
                  haptic.light();
                  navigate(`/product/${item.product.id}`);
                }}
              >
                <img
                  src={item.product.image}
                  alt={item.product.name}
                  className="w-full h-full object-cover"
                />
              </div>

              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ */}
              <div className="flex-1 min-w-0">
                <div className="flex justify-between items-start mb-2">
                  <div className="flex-1 min-w-0">
                    <div className="text-xs text-tg-hint uppercase tracking-wide">
                      {item.product.brand}
                    </div>
                    <h3 
                      className="font-medium text-tg-text line-clamp-2 leading-tight cursor-pointer hover:text-tg-button"
                      onClick={() => {
                        haptic.light();
                        navigate(`/product/${item.product.id}`);
                      }}
                    >
                      {item.product.name}
                    </h3>
                  </div>
                  
                  {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
                  <button
                    onClick={() => handleRemoveItem(item.product.id, item.product.name)}
                    className="p-1 text-red-500 hover:bg-red-50 rounded transition-colors ml-2"
                  >
                    <Trash2 size={16} />
                  </button>
                </div>

                {/* –¶–µ–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ */}
                <div className="flex items-end justify-between">
                  <div>
                    <div className="font-bold text-tg-button">
                      {formatPrice(item.product.price * item.quantity)}
                    </div>
                    <div className="text-xs text-tg-hint">
                      {formatPrice(item.product.price)} –∑–∞ —à—Ç.
                    </div>
                  </div>

                  {/* –°—á–µ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ */}
                  <div className="flex items-center gap-2">
                    <button
                      onClick={() => handleQuantityChange(item.product.id, item.quantity - 1)}
                      className="w-8 h-8 bg-tg-secondary-bg rounded-full flex items-center justify-center hover:bg-gray-200 transition-colors"
                    >
                      <Minus size={14} />
                    </button>
                    
                    <span className="w-8 text-center font-medium">
                      {item.quantity}
                    </span>
                    
                    <button
                      onClick={() => handleQuantityChange(item.product.id, item.quantity + 1)}
                      className="w-8 h-8 bg-tg-button text-tg-button-text rounded-full flex items-center justify-center hover:opacity-90 transition-opacity"
                    >
                      <Plus size={14} />
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </Card>
        ))}
      </div>

      {/* –ò—Ç–æ–≥–æ */}
      <Card className="bg-tg-secondary-bg">
        <div className="space-y-3">
          <div className="flex justify-between items-center">
            <span className="text-lg">–¢–æ–≤–∞—Ä—ã ({count}):</span>
            <span className="text-lg font-medium">{formatPrice(total)}</span>
          </div>
          
          <div className="flex justify-between items-center text-sm text-tg-hint">
            <span>–î–æ—Å—Ç–∞–≤–∫–∞:</span>
            <span>—Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–∫–∞–∑–µ</span>
          </div>
          
          <div className="border-t border-gray-200 pt-3">
            <div className="flex justify-between items-center">
              <span className="text-xl font-bold">–ö –æ–ø–ª–∞—Ç–µ:</span>
              <span className="text-xl font-bold text-tg-button">
                {formatPrice(total)}
              </span>
            </div>
          </div>
        </div>
      </Card>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
      <div className="grid grid-cols-2 gap-3">
        <Button
          variant="secondary"
          onClick={() => {
            haptic.light();
            navigate('/catalog');
          }}
          className="flex items-center justify-center gap-2"
        >
          –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã
        </Button>
        
        <Button
          onClick={() => {
            haptic.light();
            setShowCheckout(true);
          }}
          className="flex items-center justify-center gap-2"
        >
          –û—Ñ–æ—Ä–º–∏—Ç—å
          <ArrowRight size={16} />
        </Button>
      </div>

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã) */}
      <Card>
        <div className="text-center">
          <h3 className="font-medium mb-2">üí° –ü–æ–ª–µ–∑–Ω–æ –∑–Ω–∞—Ç—å</h3>
          <div className="text-sm text-tg-hint space-y-2">
            <div>‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 300‚ÇΩ –ø–æ –≥–æ—Ä–æ–¥—É</div>
            <div>‚Ä¢ –°–∞–º–æ–≤—ã–≤–æ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω–æ</div>
            <div>‚Ä¢ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏</div>
          </div>
        </div>
      </Card>

      {/* Bottom Sheet –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ */}
      <BottomSheet
        isOpen={showCheckout}
        onClose={() => setShowCheckout(false)}
        title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"
      >
        <CheckoutForm onSuccess={() => setShowCheckout(false)} />
      </BottomSheet>
    </div>
  );
};