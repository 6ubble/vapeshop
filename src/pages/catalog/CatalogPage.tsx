import React, { useState } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { ProductSearch } from '../features/search';
import { ProductCard } from '../widgets/product-card';
import { EmptyState } from '../shared/ui';
import { useProducts, CATEGORIES } from '../entities/product';
import { useTelegram } from '../shared/telegram';
import type { Product } from '../shared/types';

export const CatalogPage: React.FC = () => {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const { haptic } = useTelegram();
  
  const { getAll, getByCategory } = useProducts();
  const [searchResults, setSearchResults] = useState<Product[]>([]);
  const [isSearching, setIsSearching] = useState(false);
  
  // –§–∏–ª—å—Ç—Ä –∏–∑ URL
  const categoryParam = searchParams.get('category') || 'all';
  const [selectedCategory, setSelectedCategory] = useState(categoryParam);

  // –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
  const displayProducts = isSearching 
    ? searchResults 
    : getByCategory(selectedCategory);

  const handleSearchResults = (results: Product[]) => {
    setSearchResults(results);
    setIsSearching(results.length > 0 || true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –¥–∞–∂–µ –µ—Å–ª–∏ –ø—É—Å—Ç–æ
  };

  const handleCategoryChange = (categoryId: string) => {
    haptic.light();
    setSelectedCategory(categoryId);
    setIsSearching(false);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º URL –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    const newParams = new URLSearchParams(searchParams);
    if (categoryId === 'all') {
      newParams.delete('category');
    } else {
      newParams.set('category', categoryId);
    }
    
    const newUrl = newParams.toString() ? `?${newParams.toString()}` : '';
    window.history.replaceState({}, '', `/catalog${newUrl}`);
  };

  const handleProductClick = (product: Product) => {
    haptic.light();
    navigate(`/product/${product.id}`);
  };

  return (
    <div className="space-y-4">
      {/* –ü–æ–∏—Å–∫ */}
      <ProductSearch onResults={handleSearchResults} />

      {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∏—â–µ–º */}
      {!isSearching && (
        <div className="flex gap-2 overflow-x-auto pb-2 scrollbar-hide">
          {CATEGORIES.map(category => (
            <button
              key={category.id}
              onClick={() => handleCategoryChange(category.id)}
              className={`
                px-4 py-2 rounded-full whitespace-nowrap transition-colors
                ${selectedCategory === category.id
                  ? 'bg-tg-button text-tg-button-text'
                  : 'bg-tg-secondary-bg text-tg-text'
                }
              `}
            >
              {category.emoji} {category.name}
            </button>
          ))}
        </div>
      )}

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
      <div className="space-y-3">
        {displayProducts.map(product => (
          <ProductCard
            key={product.id}
            product={product}
            onClick={() => handleProductClick(product)}
            variant="list"
          />
        ))}
      </div>

      {/* –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
      {displayProducts.length === 0 && (
        <EmptyState 
          title={isSearching ? "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" : "–¢–æ–≤–∞—Ä—ã —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è"}
          description={isSearching ? "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å" : "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏"}
          icon={<div className="text-4xl">üîç</div>}
        />
      )}
    </div>
  );
};