import React, { Suspense } from 'react';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { TelegramProvider } from './shared/Telegram';
import { AppLayout } from './widgets/Layout';
import { LoadingSpinner } from './shared/Ui';
import { useTelegramSync } from './entities/user';

// –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
const HomePage = React.lazy(() => import('./pages/HomePage').then(m => ({ default: m.HomePage })));
const CatalogPage = React.lazy(() => import('./pages/CatalogPage').then(m => ({ default: m.CatalogPage })));
const ProductPage = React.lazy(() => import('./pages/ProductPage').then(m => ({ default: m.ProductPage })));
const CartPage = React.lazy(() => import('./pages/CartPage').then(m => ({ default: m.CartPage })));
const ProfilePage = React.lazy(() => import('./pages/ProfilePage').then(m => ({ default: m.ProfilePage })));

// React Query –∫–ª–∏–µ–Ω—Ç - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Telegram Mini Apps
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000,     // 5 –º–∏–Ω—É—Ç –∫–µ—à
      gcTime: 10 * 60 * 1000,      // 10 –º–∏–Ω—É—Ç –≤ –ø–∞–º—è—Ç–∏
      retry: (failureCount, error: any) => {
        // –ù–µ —Ä–µ—Ç—Ä–∞–∏–º 4xx –æ—à–∏–±–∫–∏
        if (error?.response?.status >= 400 && error?.response?.status < 500) {
          return false;
        }
        return failureCount < 2;
      },
      retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),
      refetchOnWindowFocus: false,  // Telegram –Ω–µ –∏–º–µ–µ—Ç —Ñ–æ–∫—É—Å–∞ –æ–∫–æ–Ω
      refetchOnReconnect: true,     // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      networkMode: 'offlineFirst'   // –í–∞–∂–Ω–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
    },
    mutations: {
      retry: 1,
      networkMode: 'offlineFirst'
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ React Query
queryClient.setMutationDefaults(['order'], {
  mutationFn: async (data) => {
    const tg = window.Telegram?.WebApp;
    
    try {
      return await fetch('/api/orders', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });
    } catch (error) {
      tg?.HapticFeedback?.notificationOccurred?.('error');
      throw error;
    }
  }
});

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Telegram
const TelegramSync: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  useTelegramSync();
  return <>{children}</>;
};

// Fallback –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
const PageLoader: React.FC = () => (
  <div className="flex items-center justify-center py-20">
    <div className="text-center">
      <LoadingSpinner size="lg" />
      <p className="text-tg-hint mt-4">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
    </div>
  </div>
);

// –†–æ—É—Ç–µ—Ä —Å Suspense
const AppRouter: React.FC = () => (
  <Suspense fallback={<PageLoader />}>
    <Routes>
      <Route path="/" element={<HomePage />} />
      <Route path="/catalog" element={<CatalogPage />} />
      <Route path="/product/:id" element={<ProductPage />} />
      <Route path="/cart" element={<CartPage />} />
      <Route path="/profile" element={<ProfilePage />} />
      
      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <Route path="/orders" element={<Navigate to="/profile" replace />} />
      <Route path="/favorites" element={<Navigate to="/profile" replace />} />
      <Route path="/settings" element={<Navigate to="/profile" replace />} />
      
      {/* 404 */}
      <Route path="*" element={<Navigate to="/" replace />} />
    </Routes>
  </Suspense>
);

// Error Boundary
class ErrorBoundary extends React.Component<
  { children: React.ReactNode },
  { hasError: boolean; error?: Error }
> {
  constructor(props: { children: React.ReactNode }) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error) {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('Telegram Mini App Error:', error, errorInfo);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ Telegram –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    window.Telegram?.WebApp?.sendData?.(JSON.stringify({
      type: 'error',
      message: error.message,
      stack: error.stack
    }));
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen bg-tg-bg flex items-center justify-center p-4">
          <div className="text-center">
            <div className="text-6xl mb-4">üòï</div>
            <h2 className="text-xl font-bold text-tg-text mb-2">
              –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            </h2>
            <p className="text-tg-hint mb-6 max-w-sm">
              –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å.
            </p>
            <button
              onClick={() => window.location.reload()}
              className="px-6 py-3 bg-tg-button text-tg-button-text rounded-lg font-medium hover:opacity-90 transition-opacity"
            >
              –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
            </button>
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const App: React.FC = () => {
  return (
    <ErrorBoundary>
      <QueryClientProvider client={queryClient}>
        <TelegramProvider>
          <TelegramSync>
            <BrowserRouter>
              <AppLayout>
                <AppRouter />
              </AppLayout>
            </BrowserRouter>
          </TelegramSync>
        </TelegramProvider>
      </QueryClientProvider>
    </ErrorBoundary>
  );
};

export default App;